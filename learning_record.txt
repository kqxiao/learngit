// 创建版本名
$ mkdir learngit
$ cd learngit
$ pwd

git add <file>  // 添加文件
git commit -m<message>  // 添加修改信息
git status // 查看仓库当前状态
git diff <file> // 查看difference，查看改变之后就可以放心提交给仓库，还是用add
// add后，用git status, 可看到可commit的
git log // 查看提交日志 h 查看帮助 q 退出
git log --pretty=oneline    // 更简单

$ git reset --hard HEAD^    // 回到上个版本
$ git reset --hard <commit_id>  // 回到版本号
$ git reflog    // 查看历史，查找版本号
$ git checkout -- readme.txt // 丢弃工作区的修改， 没有add，回到和版本库一样的状态； 加入暂存库后又做修改，回到和暂存库一样的状态
// checkout 实际上是用版本库里的版本替换工作区的版本

$ git reset HEAD readme.txt // 如果提交到暂存区，回到head，回到最新版本，撤销提交到暂存区的修改

$ rm <file>     // 删除文件
$ git rm <file> 并且 commit // 从版本库中删掉
// 删错了，版本库里还有 $ git checkout -- test.txt

$ ssh-keygen -t rsa -C "youremail@example.com"  // 创建ssh key

// 按照gihub上的提示关联库
$ git remote add origin git@server-name:path/repo-name.git  // 关联一个远程库，要给远程库一个名字 origin 是习惯性名字


$ git push origin -u main   // 第一次push
$ git push origin main

$ git remote -v     // 查看远程库信息
$ git remote rm <name>  // 解除与远程库的关联



给77演示git